from fastapi import FastAPI, HTTPExceptionfrom sqlalchemy import textfrom sqlalchemy.exc import IntegrityErrorimport databasefrom schemas import AddProductRequestapp = FastAPI(title="Управление заказами")@app.post("/orders/{order_id}/add-product")def add_product_to_order(order_id: int, request: AddProductRequest):    product_id = request.product_id    add_quantity = request.quantity    if add_quantity <= 0:        raise HTTPException(status_code=400, detail="Количество должно быть больше 0")    with database.engine.connect() as conn:        # Проверяем, существует ли заказ        order = conn.execute(            text("SELECT client_id FROM orders WHERE order_id = :order_id"),            {"order_id": order_id}        ).fetchone()        if not order:            raise HTTPException(status_code=404, detail="Заказ не найден")        # Проверяем товар и его наличие        product = conn.execute(            text("SELECT name, price, quantity FROM product WHERE product_id = :product_id"),            {"product_id": product_id}        ).fetchone()        if not product:            raise HTTPException(status_code=404, detail="Товар не найден")        if product.quantity < add_quantity:            raise HTTPException(                status_code=400,                detail=f"Недостаточно товара в наличии. Доступно: {product.quantity}"            )        # Проверяем, есть ли уже этот товар в заказе        existing_item = conn.execute(            text("""                SELECT order_item_id, quantity                FROM order_item                WHERE order_id = :order_id AND product_id = :product_id            """),            {"order_id": order_id, "product_id": product_id}        ).fetchone()        # Начинаем транзакцию        try:            conn.execute(text("BEGIN"))            if existing_item:                # Увеличиваем количество                new_quantity = existing_item.quantity + add_quantity                conn.execute(                    text("""                        UPDATE order_item                        SET quantity = :quantity                        WHERE order_item_id = :order_item_id                    """),                    {                        "quantity": new_quantity,                        "order_item_id": existing_item.order_item_id                    }                )            else:                # Добавляем новую позицию                conn.execute(                    text("""                        INSERT INTO order_item (order_id, product_id, quantity, unit_price)                        VALUES (:order_id, :product_id, :quantity, :unit_price)                    """),                    {                        "order_id": order_id,                        "product_id": product_id,                        "quantity": add_quantity,                        "unit_price": float(product.price)                    }                )            # Уменьшаем остаток на складе            conn.execute(                text("""                    UPDATE product                    SET quantity = quantity - :quantity                    WHERE product_id = :product_id                """),                {"quantity": add_quantity, "product_id": product_id}            )            conn.execute(text("COMMIT"))        except Exception as e:            conn.execute(text("ROLLBACK"))            raise HTTPException(status_code=500, detail="Ошибка при обновлении базы данных")    return {        "success": True,        "message": f"Товар '{product.name}' добавлен в заказ {order_id}",        "quantity": add_quantity    }